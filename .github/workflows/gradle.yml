name: Java CI/CD with Gradle and Docker Swarm

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
    types: [ closed ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PROFILE: prod
      DB_PROD_HOST: ${{ secrets.DB_PROD_HOST }}
      DB_PROD_USERNAME: ${{ secrets.DB_PROD_USERNAME }}
      DB_PROD_PASSWD: ${{ secrets.DB_PROD_PASSWD }}
      SOCIAL_CLIENT_ID: ${{ secrets.SOCIAL_CLIENT_ID }}
      SOCIAL_CLIENT_PASSWD: ${{ secrets.SOCIAL_CLIENT_PASSWD }}
      SOCIAL_CLIENT_SECRET: ${{ secrets.SOCIAL_CLIENT_SECRET }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      WAS_HOST: ${{ secrets.WAS_HOST }}
      AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ap-northeast-2
      DEFAULT_PROFILE: ${{ secrets.DEFAULT_PROFILE }}
      AWS_CLOUDFRONT_DOMAIN: ${{ secrets.AWS_CLOUDFRONT_DOMAIN }}
      SOCKET_SERVER_URL: ${{secrets.SOCKET_SERVER_URL}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew --warning-mode all build -i

  docker-build-and-deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (without Test)
        run: ./gradlew clean build -x test --stacktrace

      - name: Docker Hub build & push
        run: |
          sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PWD }}
          sudo docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest .
          sudo docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest

      - name: Deploy to Docker Swarm
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.WAS_HOST }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.WAS_PORT }}
          script: |
            # Docker Swarm 초기화 (처음 실행시에만 필요)
            if ! docker info | grep -q "Swarm: active"; then
              sudo docker swarm init
            fi

            # 환경 변수 파일 생성
            cat << EOF > .env
            DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            DOCKER_HUB_REPO_NAME=${{ secrets.DOCKER_HUB_REPO_NAME }}
            PROFILE=${{ secrets.PROFILE }}
            DB_PROD_HOST=${{ secrets.DB_PROD_HOST }}
            DB_PROD_USERNAME=${{ secrets.DB_PROD_USERNAME }}
            DB_PROD_PASSWD=${{ secrets.DB_PROD_PASSWD }}
            SOCIAL_CLIENT_ID=${{ secrets.SOCIAL_CLIENT_ID }}
            SOCIAL_CLIENT_PASSWD=${{ secrets.SOCIAL_CLIENT_PASSWD }}
            SOCIAL_CLIENT_SECRET=${{ secrets.SOCIAL_CLIENT_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            DEFAULT_PROFILE=${{ secrets.DEFAULT_PROFILE }}
            AWS_CLOUDFRONT_DOMAIN=${{ secrets.AWS_CLOUDFRONT_DOMAIN }}
            SOCKET_SERVER_URL=${{ secrets.SOCKET_SERVER_URL }}
            APP_PORT=8080
            REDIS_PORT=6379
            APP_REPLICAS=2
            EOF

            # 프로젝트 클론 또는 업데이트
            if [ -d "Linkode2024_BE" ]; then
              cd Linkode2024_BE
              git pull origin develop
            else
              git clone -b develop https://github.com/Linkode2024/Linkode2024_BE.git
              cd Linkode2024_BE
            fi

            # 스택 배포 또는 업데이트
            sudo docker stack deploy -c docker-compose.yml linkode-stack

            # 서비스 로그 확인
            sudo docker service logs linkode-stack_app