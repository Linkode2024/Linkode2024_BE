name: Java CI/CD with Gradle

on:
  push:
    branches: [ "LINK-100-CI/CD-구성" ]
  pull_request:
    branches: [ "LINK-100-CI/CD-구성" ]
    types: [ closed ]

permissions:
  contents: read


jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PROFILE: ${{ secrets.PROFILE }}
      DB_PROD_PASSWD: ${{ secrets.DB_PROD_PASSWD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew --warning-mode all build -i

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (without Test)
        run: ./gradlew clean build -x test --stacktrace

      - name: Docker Hub build & push
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PWD }}
          docker images
          docker push 도커이미지 

      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          username: ec2-user
          host: ${{ secrets.WAS_HOST }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.WAS_PORT }}
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}
            sudo docker run -d -e DB_PROD_HOST=${{ secrets.DB_PROD_HOST }} \
            -e DB_PROD_USERNAME=${{ secrets.DB_PROD_USERNAME }} \
            -e DB_PROD_PASSWD=${{ secrets.DB_PROD_PASSWD }} \
            -e DB_PROD_PASSWD=${{ secrets.SOCIAL_CLIENT_ID }} \
            -e DB_PROD_PASSWD=${{ secrets.SOCIAL_CLIENT_PASSWD }} \
            -p 9000:9000 ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}            
            
            sudo docker image prune -f